name: Build and Release

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # This fetches all history for all branches and tags

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Get latest version
        id: get_latest_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "::set-output name=latest_version::${LATEST_TAG#v}"

      - name: Increment version
        id: increment_version
        run: |
          IFS='.' read -ra VERSION_PARTS <<< "${{ steps.get_latest_version.outputs.latest_version }}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            NEW_VERSION="$MAJOR.$((MINOR+1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH+1))"
          fi
          
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Update Cargo.toml
        run: |
          sed -i 's/^version = ".*"/version = "${{ steps.increment_version.outputs.new_version }}"/' Cargo.toml

      - name: Build Release
        run: cargo build --release

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref == 'refs/heads/main' && format('v{0}', steps.increment_version.outputs.new_version) || format('dev-v{0}', steps.increment_version.outputs.new_version) }}
          release_name: ${{ github.ref == 'refs/heads/main' && format('Release v{0}', steps.increment_version.outputs.new_version) || format('Dev Release v{0}', steps.increment_version.outputs.new_version) }}
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/subbyy
          asset_name: ${{ github.ref == 'refs/heads/main' && 'subbyy' || 'subbyy-dev' }}
          asset_content_type: application/octet-stream

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Bump version to ${{ steps.increment_version.outputs.new_version }}"
          git push
